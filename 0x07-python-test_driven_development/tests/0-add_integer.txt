The ``add integer`` module
======================

Using ``add_integer``
-------------------

Adding the function:

    >>> add_integer = __import__("0-add_integer").add_integer

Now use it:

    >>> add_integer(2, 3)
    5

    The function can work with floats.

    >>> add_integer(2.3, 3)
    5

    >>> add_integer(2.0, -1)
    1

    The function shouldn't work for strings.

    >>> add_integer("string", 5)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(5, "string")
    Traceback (most recent call last):
    TypeError: b must be an integer

    The function should not work with lists and dicts as well.

    >>> add_integer(1, [1, 2, 3])
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer({1, 2, 3}, 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer({1, 2, 3}, {1, 2, 3})
    Traceback (most recent call last):
    TypeError: a must be an integer

    In a situation where None is passed in, return an error.

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None, 2)
    Traceback (most recent call last):
    TypeError: a must be an integer

    Nan values cannot be computed.

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    The function will fail if infinity is provided.

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
